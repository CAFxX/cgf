#include "CGF.h"

CGF::CGF(ModulePass *pass, Module *module) : p(pass), m(module) {
    opaqueTy = Type::getInt8PtrTy(m->getContext());
}

void CGF::run() {
    // enumerate all functions that will be transformed
    TRACEMSG("Registering functions...");
    for (Module::iterator f = m->begin(); f != m->end(); f++) {
        if (f->isDeclaration())
            TRACEMSG("Function declaration skipped");
        else if (f->isVarArg())
            TRACEMSG("Variadic function skipped");
        else
            registerFunction(f);
    }

    // enumerate all callsites that will be transformed
    TRACEMSG("Registering callsites...");
    for (Module::iterator f = m->begin(); f != m->end(); f++) {
        for (Function::iterator b = f->begin(); b != f->end(); b++) {
            for (BasicBlock::iterator i = b->begin(); i != b->end(); i++) {
                if (CallInst *c = dyn_cast<CallInst>(i)) {
                    if (c->getCalledFunction() == NULL)
                        TRACEMSG("Indirect callsite skipped");
                    else if (c->getCalledFunction() == c->getParent()->getParent())
                        TRACEMSG("Direct recursive callsite skipped");
                    else if (funcs.count(c->getCalledFunction()) == 0)
                        TRACEMSG("Callee not flattened");
                    else if (funcs.count(c->getParent()->getParent()) == 0)
                        TRACEMSG("Caller not flattened");
                    else
                        registerCallsite(c);
                }
            }
        }
    }

    // create dispatch function
    TRACEMSG("Creating dispatch function...");
    createDispatchFunction(); 

    // flatten functions
    TRACEMSG("Flattening functions...");
    for (funcMap::iterator f = funcs.begin(), fe = funcs.end(); f != fe; f++) {
        f->second->flatten();
    }

    // flatten callsites
    TRACEMSG("Flattening callsites...");
    for (callsiteMap::iterator s = calls.begin(), se = calls.end(); s != se; s++) {
        s->second->flatten();
    }

    TRACEMSG("Creating wrappers...");
    for (funcMap::iterator f = funcs.begin(), fe = funcs.end(); f != fe; f++) {
        f->second->createForwardingWrapper(true);
    }

    TRACEMSG("Strip names...");
    for (Function::iterator i = dispatch->begin(), ie = dispatch->end(); i != ie; ++i) {
        //i->setName("");
        for (BasicBlock::iterator j = i->begin(), je = i->end(); j != je; ++j) {
            j->setName("");
        }
    }

    // fix phi_dummys
    TRACEMSG("Fixing broken values...");
    fixBrokenValues();

    // fix phi_dummys
    TRACEMSG("Fixing dummy phis...");
    fixDummyPhis();

    /*
    TRACEMSG("Replace indirectbr");
    BasicBlock *ubb = BasicBlock::Create(dispatch->getContext(), "unreachable", dispatch);
    new UnreachableInst(dispatch->getContext(), ubb);
    TRACE();
    std::vector<IndirectBrInst*> wlBr;
    for (inst_iterator i = inst_begin(dispatch), ie = inst_end(dispatch); i != ie; i++)
        if (dyn_cast<IndirectBrInst>(&*i))
            wlBr.push_back(dyn_cast<IndirectBrInst>(&*i));
    TRACE();
    for (std::vector<IndirectBrInst*>::iterator j = wlBr.begin(), je = wlBr.end(); j != je; j++) {
        TRACE();
        BasicBlock *next = ubb;
        Value *a = (*j)->getAddress(); assert(a);
        PtrToIntInst *ai = new PtrToIntInst(a, Type::getInt64Ty(m->getContext()), "", *j); assert(ai);
        for (unsigned k=0, ke=(*j)->getNumDestinations(); k != ke; k++) {
            TRACE();
            BasicBlock *bb = BasicBlock::Create(m->getContext(), "", dispatch); assert(bb);
            BasicBlock *d = (*j)->getDestination(k); assert(d);
            BlockAddress *da = BlockAddress::get(d); assert(da);
            Constant *dai = ConstantExpr::getPointerCast(da, Type::getInt64Ty(m->getContext())); assert(dai);
            ICmpInst *icmp = new ICmpInst(*bb, CmpInst::ICMP_EQ, ai, dai); assert(icmp);
            BranchInst::Create(d, next, icmp, bb);
            next = bb;
            for (BasicBlock::iterator l=d->begin(), le=d->end(); l != le; l++) {
                PHINode *phi = dyn_cast<PHINode>(l);
                if (phi)
                    phi->setIncomingBlock(phi->getBasicBlockIndex((*j)->getParent()), bb);
            }
        }
        TRACE();
        BranchInst::Create(next, *j);
        TRACE();
        (*j)->eraseFromParent();
    }
    */

    dispatch->setDoesNotAccessMemory(false);
    for (int i=0; i<=3; i++) {
        dispatch->setDoesNotAlias(i, i != 0);
        dispatch->setDoesNotCapture(i, i != 0);
    }
}

void CGF::registerFunction(Function *f) {
    CGFFunction *F = new CGFFunction(this, f);
    F->prepare();
    funcs[f] = F;
}

void CGF::registerCallsite(CallInst *s) {
    CGFCallSite *S = new CGFCallSite(this, s);
    S->prepare();
    calls[s] = S;
}

void CGF::createDispatchFunction() {
    // create the function itself
    TRACE();
    std::vector<const Type*> args(3);
    args[0] = args[1] = args[2] = opaqueTy;
    const FunctionType *dispatchTy = FunctionType::get(Type::getVoidTy(m->getContext()), args, false);
    dispatch = Function::Create(dispatchTy, GlobalValue::PrivateLinkage, "dispatch", m);
    dispatch->setCallingConv(CallingConv::Fast);
    Function::arg_iterator i = dispatch->arg_begin();
    Argument *entryBBptr = &*i;
    entryBBptr->setName("EntryBBPtr");
    (dispatchArgs = &*++i)->setName("OpaqueArgumentsPtr");
    (dispatchRetVal = &*++i)->setName("OpaqueReturnValuePtr");

    // create the outer dispatcher
    TRACE();
    BasicBlock *dispatchEntry = BasicBlock::Create(m->getContext(), "entry", dispatch);
    assert(dispatchEntry == &dispatch->getEntryBlock());
    outerDispatcher = IndirectBrInst::Create(entryBBptr, 0, dispatchEntry);
}

void CGF::fixBrokenValues() {
    unsigned b=0;
    for (Function::iterator i = dispatch->begin(), ie = dispatch->end(); i != ie; i++, b++) {
        statFixedBrokenValues += PropagateValues(i);
        fprintf(stderr, "%d/%ld BBs, %d Values\r", b, dispatch->size(), statFixedBrokenValues.getValue());
    }
}

void CGF::fixDummyPhis() {
    for (funcMap::iterator f = funcs.begin(); f != funcs.end(); f++) {
        f->second->fixDummyPhis();
    }
}

